








AGORA ESTUDAREMOS OUTRO CONCEITO,







O DE 




""CHAIN DYNAMIC TABLES BETWEEN EACH OTHER""...












ISSO PQ VAMOS CRIAR 1 DYNAMIC TABLE,








QUE VAI APONTAR 

A 2 STAGING TABLES...








TIPO ASSIM:
















STAGE TABLE 1------------
                        i
                        i
                        i
                        i
                        i
                        DYNAMIC TABLE 1 ----------->  DYNAMIC TABLE 2...
                        i
                        i

                        i
                        i
STAGE TABLE 2 ----------










COM ISSO, FICAMOS COM 1 DYNAMIC TABLE QUE DEPENDE DE OUTRA... 

(
    A DYNAMIC TABLE 2 DEPENDE 


    DA PRIMEIRA DYNAMIC TABLE...
)













--> COMO FAZEMOS ISSO?










--> BEM, JÁ TÍNHAMOS CRIADO 1 DYNAMIC TABLE,



A DYNAMIC TABLE DE "INTERMEDIATE_CUST_DATA_DYNAMIC_REFRESH":





CREATE OR REPLACE DYNAMIC TABLE DEMO_DB.PUBLIC.INTERMEDIATE_CUST_DATA_DYN_REFRESH
  TARGET_LAG = '1 minute'
  WAREHOUSE = compute_wh
  AS
    SELECT A.C_CUSTKEY, A.C_NAME, A.C_ADDRESS,B.O_ORDERSTATUS,B.O_ORDERPRIORITY,B.o_orderkey FROM 
    DEMO_DB.PUBLIC.CUSTOMER_STG A
    INNER JOIN
    DEMO_DB.PUBLIC.ORDERS_STG B
    ON A.C_CUSTKEY = B.O_CUSTKEY;















--> AGORA O QUE FAREMOS, NO CASO,



É CHAINAR OUTRA 

TABLE EM CIMA DELA,


QUE VAI DEPENDER DELA...












--> PARA ISSO, O PROFESSOR CRIA OUTRA TABLE,




DE NOME "LINEITEM"...











---------------------------------------------------





CREATE OR REPLACE TABLE DEMO_DB.PUBLIC.LINEITEM 
AS 
SELECT * FROM SNOWFLAKE_SAMPLE_DATA.TPCH_SF1.LINEITEM;












--> ISSO FEITO, CRIAREMOS UMA OUTRA TABLE,

QUE SEŔA 



"CUSTOMER_ORDER_LINEITEM_DYNAMIC"...







CRAETE OR REPLACE DYNAMIC TABLE DEMO_DB.PUBLIC.CUST_ORDER_LINEITEM_DYN
TARGET_LAG='1 minute'
WAREHOUSE=compute_wh 
AS 
SELECT
A.C_CUSTKEY,
A.C_NAME,
A.C_ADDRESS,
A.O_ORDERSTATUS,
A.O_ORDERPRIORITY
FROM DEMO_DB.PUBLIC.INTERMEDIATE_CUST_DATA_DYNAMIC_REFRESH AS A 
INNER JOIN 
DEMO_DB.PUBLIC.LINEITEM AS B 
ON A.o_orderkey = B.L_ORDERKEY;










--> CERTO.... ESSA DYNAMIC TABLE VAI 

SE REFERENCIAR 


À DYNAMIC TABLE QUE CRIAMOS NA 


ETAPA ANTERIOR (
    por isso "FROM DEMO_DB.PUBLIC.INTERMEDIATE_CUST_DATA_DYNAMIC_REFRESH"
),



E VAMOS FAZER JOIN DE ESSA DYNAMIC TABLE 


COM A TABLE DE "DEMO_DB.PUBLIC.LINEITEM",



com base na ORDERKEY...















OK... CRIAMOS ESSA DYNAMIC TABLE...










O GRÁFICO DA DYNAMIC TABLE....











o flow ficou tipo assim:











STAGE TABLE 1------------
                        i
                        i
                        i
                        i
                        i
                        DYNAMIC TABLE 1 ----------->  DYNAMIC TABLE 2...
                        i                                 ^
                        i                                 i
                        i                                 i
                        i                                 i
                        i                                 i
STAGE TABLE 2 ----------                                  i
                                                          i
                                                          i
                                                          i
                        LINEITEM --------------------------
                        (table normal)....











            








ok.... 





QUER DIZER QUE, AGORA,

SE OCORRER QUALQUER CHANGE NAQUELA DYNAMIC TABLE 1,



DEPOIS DE 1 TIME LAG DE 1 MINUTO,


AQUELA DYNAMIC TABLE 2 



SERÁ REFRESHED...






















--> SE VISUALIZARMOS A QUERY HISTORY,

VEREMOS 

QUE 

A REFRESH ACTION FOI DE TYPE "INCREMENTAL"...
















--> O PONTO QUE DEVEMOS ENTENDER, AQUI, É:





1) NAO CRIAMOS NENHUMA DEPENDENCY ___eXPLICITAMENTE,



TUDO FOI DEFINIDO __ IMPLICITAMENTE (



    tudo foi criado 

    AUTOMATICAMENTE,

    COM BASE NA NOSSA QUERY (com base no join em cima 
    
    daquela dynamic table.... ao criarmos essa dynamic table 2 
    a partir da data da dynamic table 1,

    criamos essa dependency IMPLICITAMENTE...
    )
)










--> QUER DIZER QUE SÓ TEMOS QUE ESCREVER/USAR QUERIES QUE 

APONTEM À OUTRA DYNAMIC TABLE,



COMO 


AQUELA VISTA ACIMA:














CRAETE OR REPLACE DYNAMIC TABLE DEMO_DB.PUBLIC.CUST_ORDER_LINEITEM_DYN
TARGET_LAG='1 minute'
WAREHOUSE=compute_wh 
AS 
SELECT
A.C_CUSTKEY,
A.C_NAME,
A.C_ADDRESS,
A.O_ORDERSTATUS,
A.O_ORDERPRIORITY
FROM DEMO_DB.PUBLIC.INTERMEDIATE_CUST_DATA_DYNAMIC_REFRESH AS A 
INNER JOIN 
DEMO_DB.PUBLIC.LINEITEM AS B 
ON A.o_orderkey = B.L_ORDERKEY;

























COM ISSO, DIGAMOS QUE VC É UM DATA ANALYST... VC 


NAO PRECISARÁ 

DEPENDER DE 1 DATA ENGINEER PARA 

CRIAR ESSE WORKFLOW....













--> MAS O QUE 

DEVEMOS ENTENDER, AQUI,
É QUE 

ESSAS DEPENDENCIES 



SAO CRIADAS AUTOMATICAMENTE,


APENAS 

PELO WRITE DESSAS QUERIES...











-> DATA ENGINEERS --> PRECISAMOS 

FAZER VÁRIAS COISAS,


PEGAR AS QUERIES,


AÍ 

CRIAR AS DEPENDENCIES, SCHEDULE O WORKFLOW,

E AÍ 

FAZER A DATA 

REFRESHAR 

EM 1 HORA PARTICULAR DOS DIAS...








MAS, COM ESSE CENÁRIO,

AFASTAMOS A NECESSIDADE DE DATA ENGINEERS --> PQ BASTA 


ESCREVER ESSAS QUERIES,
APONTANDO 

A DIFERENTES TABLES (

    apontamos a essa dynamic table,
    com nossa outra dynamic table,



    para aí criar automaticamente essa dependency...
)










--> QUER DIZER QUE O WORKFLOW 
É CRIADO AUTOMATICAMENTE,


NAO PRECISAMOS DO DATA ENGINEER 

PARA CRIAR ESSES WORKFLOWS...







(

    TAMBÉM, O DATA REFRESH 
    VAI ACONTECER 



    NA HORA QUE A DATA FOR ALTERADA...
)















--> QUER DIZER QUE ESSA É UMA GRANDE VANTAGEM QUE 
CONSEGUIMOS,

COM 

ESSAS DYNAMIC TABLES... -------> 









VANTAGENS:




1) A DATA É REFRESHADA...






2) A CRIACAO DESSES WORKFLOWS DINAMICAMENTE... (com dependencies e etc)...











O USER DESSAS DYNAMIC TABLES,


SE ELE ESCREVER AS QUERIES E AS MANTER EM 1 FILE,



AS 



DEPENDENCIES 

JÁ 

VAO SER APLICADAS,

E A DATA JÁ VAI SER IMEDIATAMENTE REFRESHADA,

COM BASE NO 

TARGET_LAG...