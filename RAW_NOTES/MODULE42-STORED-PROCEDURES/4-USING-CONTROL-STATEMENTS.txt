









NESSA AULA,

MELHORAREMOS O CÓDIGO QUE ESCREVEMOS E RETORNAMOS 

NA ÚLTIMA LESSON,

POR MEIO DE 1 WHILE LOOP E 1 FOR LOOP...







NA ÚLTIMA AULA,

ESCREVEMOS ESTE CÓDIGO:








    
//    ColumnName =  result_set1.getColumnName(1);
//    column_value = result_set1.getColumnValue(1);
//    
//    row_as_json = { ColumnName : ColumnName ,column_value : 9/10}
//          
//    array_of_rows.push(row_as_json)
//           
//    ColumnName =  result_set1.getColumnName(2);
//    column_value = result_set1.getColumnValue(2);
//    
//    row_as_json = { ColumnName : ColumnName ,column_value : 8/10}
//          
//    array_of_rows.push(row_as_json)
//    
//    table_as_json = { "key1" : array_of_rows };











--> TODOS ESSES COMANDOS FORAM USADOS INLINE NESSA 

PROCEDURE...





--> E ESSE CÓDIGO É REPETITIVO, É CÓDIGO RUIM....















--> COMO PODEMOS MELHORAR ESSE CÓDIGO?








1) COM O USO DE UM WHILE LOOP 





2) COM O USO DE 1 FOR LOOP...













TIPO ASSIM:











    $$

while(result_set1.next()) {

    -- Put each row in a variable of type JSON. 

    -- For each column in the row...

    for (var col_num = 0; col_num < result_set1.getColumnCount(); col_num = col_num + 1) {
        
        var col_name = result_set1.getColumnName(col_num+1);
        var col_value = result_set1.getColumnValue(col_num+1);


        row_as_json = {
            ColumnName: col_name,
            column_value: col_value
        }


        array_of_rows.push(row_as_json);
    }
}


var table_as_json = {
    "key1": array_of_rows
}

return table_as_json;


    $$










--> COM ISSO,


CONSEGUIMOS RETORNAR 



NOSSA DATA EM 1 FORMATO JSON,
DINAMICAMENTE...












QUANDO CHAMAMOS 

"result.next()",





vc chama o PRÓXIMO OBJECT... (o próximo JSON OBJECT da tabela).








--> E, PARA CADA "WHILE",

TEREMOS 1 FOR LOOP QUE VAI IR POR DENTRO 

DE TODAS AS COLUMNS (De cada json),
PARA PEGAR TODOS OS VALUES...


















--------------------------








O CÓDIGO COMPLETO FICOU TIPO ASSIM:












create or replace procedure column_fill_rate_loops(TABLE_NAME varchar)
  returns VARIANT NOT NULL
  language javascript
  as     
  $$  
  
    var array_of_rows = [];
    row_as_json = {};
    
    var my_sql_command = "select count(*) ABC,count(*) DEF from "+ TABLE_NAME +";"
    var statement1 = snowflake.createStatement( {sqlText: my_sql_command} );
    var result_set1 = statement1.execute();
//    result_set1.next()
    
//    ColumnName =  result_set1.getColumnName(1);
//    column_value = result_set1.getColumnValue(1);
//    
//    row_as_json = { ColumnName : ColumnName ,column_value : 9/10}
//          
//    array_of_rows.push(row_as_json)
//           
//    ColumnName =  result_set1.getColumnName(2);
//    column_value = result_set1.getColumnValue(2);
//    
//    row_as_json = { ColumnName : ColumnName ,column_value : 8/10}
//          
//    array_of_rows.push(row_as_json)
//    
//    table_as_json = { "key1" : array_of_rows };

      while (result_set1.next())  {
        // Put each row in a variable of type JSON.
 
        // For each column in the row...
        for (var col_num = 0; col_num < result_set1.getColumnCount(); col_num = col_num + 1) {
          var col_name =result_set1.getColumnName(col_num+1);
          var col_value = result_set1.getColumnValue(col_num+1);
          
          row_as_json = { ColumnName : col_name ,column_value : col_value}
          
          array_of_rows.push(row_as_json)
          }
          
        }   
        
  table_as_json = { "key1" : array_of_rows };
 
  // return table_as_json; 
  return result_set1.next();
  $$
  ;

call column_fill_rate_loops('CUSTOMER')























--> MAS DIGAMOS QUE 

RODAMOS "return result_set1.next()",




EM VEZ DE 

"return table_as_json;"....










QUAL SERÁ O RESULTADO?










O RESULTADO SERÁ DE 

"FALSE"... --> É FALSE PQ 


"result_set1.next()"




ACABA COM "FALSE",


pq quer dizer que "NÃO HÁ MAIS NENHUM ROW 

A SER EXAMINADO/GO THROUGH"...












--> TODOS OS RECORDS JÁ TERÃO "pASSED THROUGH" --> quer dizer que 


O WHILE LOOP, produzido por "result_set1.next()",

FICARÁ COMO __ FALSE...

















--> a primeira coisa que vc quer fazer,



na sua stored procedure,

se vc quer "INITIALIZE THE CURSOR" (o cursor de "result_set1"),



É 


JUSTAMENTE 

USAR 

O 


'.next()'...











result_set1.next()....








--> MAS VC NAO DEVE USAR O "result_set1.next()"


NO INÍCIO DA SUA PROCEDURE,

PQ O QUE 


ESSE NEGÓCIO, ESSE "CURSOR" FAZ, É JUSTAMENTE 


"MOVE THE CURSOR TO THE NEXT RECORD"...









-------------------------------





outra questao, aqui, é que 

ainda 


estamos usando dummy queries...








--> AGORA VAMOS USAR UMA QUERY DIFERENTE:





create or replace procedure column_fill_rate_loops_if_else(TABLE_NAME varchar)
  returns VARIANT NOT NULL
  language javascript
  as     
  $$  
  
    var array_of_rows = [];
    row_as_json = {};
    
    var my_sql_command = "select * from "+ TABLE_NAME +" LIMIT 10;"
    var statement1 = snowflake.createStatement( {sqlText: my_sql_command} );
    var result_set1 = statement1.execute();
    
      while (result_set1.next())  {
        // Put each row in a variable of type JSON.
 
        // For each column in the row...
        for (var col_num = 0; col_num < result_set1.getColumnCount(); col_num = col_num + 1) {
          var col_name =result_set1.getColumnName(col_num+1);
          var col_value = result_set1.getColumnValue(col_num+1);
          
          row_as_json = { ColumnName : col_name ,column_value : col_value}
          
          array_of_rows.push(row_as_json)
          }
          
        }   
        
  table_as_json = { "key1" : array_of_rows };
 
   return table_as_json; 
  $$
  ;

call column_fill_rate_loops_if_else('CUSTOMER')












SE ANALISARMOS ESSA STORED PROCEDURE,


PERCEBEMOS 1 PADRAO:





create or replace procedure column_fill_rate_loops_if_else(TABLE_NAME varchar)
  returns VARIANT NOT NULL
  language javascript
  as     
  $$  
  
    var array_of_rows = [];
    row_as_json = {};
    


    //// 1) SQL STATEMENT IN JAVASCRIPT VARIABLE
    var my_sql_command = "select * from "+ TABLE_NAME +" LIMIT 10;"

    //// 2) CREATION OF STATEMENT OBJECT, USING SQL COMMAND.
    var statement1 = snowflake.createStatement( {sqlText: my_sql_command} );

    //// 3) EXECUTION OF STATEMENT OBJECT
    var result_set1 = statement1.execute();
    
      while (result_set1.next())  {
        // Put each row in a variable of type JSON.
 
        // For each column in the row...
        for (var col_num = 0; col_num < result_set1.getColumnCount(); col_num = col_num + 1) {
          var col_name =result_set1.getColumnName(col_num+1);
          var col_value = result_set1.getColumnValue(col_num+1);
          
          row_as_json = { ColumnName : col_name ,column_value : col_value}
          
          array_of_rows.push(row_as_json)
          }
          
        }   
        
  table_as_json = { "key1" : array_of_rows };
   
   //// 4) RETURN OF RESULT SET/OTHER OBJECT, CONSTRUCTED USING THE RESULT SET (transformations)
   return table_as_json; 
  $$
  ;

















O CÓDIGO DO OUTRO PROFESSOR TAMBÉM SEGUIA 


1 FORMATO PARECIDO:








CREATE OR REPLACE PROCEDURE CUSTOMERS_INSERT_PROCEDURE (CREATE_DATE varchar)
    RETURNS STRING NOT NULL 
    LANGUAGE JAVASCRIPT
    AS 
    $$

        //// 1) SQL STATEMENT IN JAVASCRIPT VARIABLE
        var sql_command = 'INSERT INTO CUSTOMERS(CREATE_DATE) VALUES(:1);'
        
        //// 2) USING THE SNOWFLAKE GLOBAL OBJECT, EXECUTE SQL TEXT DIRECTLY.
        snowflake.execute(
            {
            sqlText: sql_command,
            binds: [CREATE_DATE]
            });
        return "Successfully executed.";
    $$;



















CONTINUANDO O CÓDIGO DO PROFESSOR:







create or replace procedure column_fill_rate_loops_if_else(TABLE_NAME varchar)
  returns VARIANT NOT NULL
  language javascript
  as     
  $$  
  
    var array_of_rows = [];
    row_as_json = {};
    


    //// 1) SQL STATEMENT IN JAVASCRIPT VARIABLE
    var my_sql_command = "select * from "+ TABLE_NAME +" LIMIT 10;"

    //// 2) CREATION OF STATEMENT OBJECT, USING SQL COMMAND.
    var statement1 = snowflake.createStatement( {sqlText: my_sql_command} );

    //// 3) EXECUTION OF STATEMENT OBJECT
    var result_set1 = statement1.execute();
    
      while (result_set1.next())  {
        // Put each row in a variable of type JSON.
 
        // For each column in the row...
        for (var col_num = 0; col_num < result_set1.getColumnCount(); col_num = col_num + 1) {
          var col_name =result_set1.getColumnName(col_num+1);
          var col_value = result_set1.getColumnValue(col_num+1);
          
          row_as_json = { ColumnName : col_name ,column_value : col_value}
          
          array_of_rows.push(row_as_json)
          }
          
        }   
        
  table_as_json = { "key1" : array_of_rows };
   
   //// 4) RETURN OF RESULT SET/OTHER OBJECT, CONSTRUCTED USING THE RESULT SET (transformations)
   return table_as_json; 
  $$
  ;





















--> AGORA VEREMOS COMO USAR 1 IF-ELSE CLAUSE...












--> MAS ANTES DISSO,

DISSQUEMOS ESSA STORED PROCEDURE:










A) NÓS LIMITAMOS O SELECT A APENAS 10 RECORDS...




B) MOVEMOS O CURSOR POR DENTRO 


DE TODOS 10 RECORDS

POR MEIO 


DE 

"result_set1.next()"...






C) CRIAMOS 1 JSON OBJECT,

'table_as_json',

a partir de todos esses records, colocados em 1 array,

dentro de 1 chave "key1"...



















--> O PROFESSOR ENTAO CHAMA ESSA PROCEDURE,

COM 




CALL column_fill_rate_loops_if_else('CUSTOMER');













COMO RESULTADO DESSA QUERY, TEMOS 1 JSON OBJECT 




COM VÁRIOS ITEMS EM 1 ARRAY NA KEY DE "key1"..










--> o formato de cada 


object ficou tipo 

{
  "ColumnName": "C_CUSTKEY",
  "column_value": 9
}






EX:





{
  "key1": [
    {
      "ColumnName": "C_CUSTKEY",
      "column_value": 30001
    },
    {
      "ColumnName": "C_NAME",
      "column_value": "Customer#000030001"
    },
    {
      "ColumnName": "C_ADDRESS",
      "column_value": "Ui1b,3Q71CiLTJn4MbVp,,YCZARIaNTelfst"
    },
    {
      "ColumnName": "C_NATIONKEY",
      "column_value": 4
    },
    {
      "ColumnName": "C_PHONE",
      "column_value": "14-526-204-4500"
    },
    {
      "ColumnName": "C_ACCTBAL",
      "column_value": 8.848469999999999e+03
    },
    {
      "ColumnName": "C_MKTSEGMENT",
      "column_value": "MACHINERY"
    },
    {
      "ColumnName": "C_COMMENT",
      "column_value": "frays wake blithely enticingly ironic asymptote"
    },
    {
      "ColumnName": "C_CUSTKEY",
      "column_value": 30002
    },
    {
      "ColumnName": "C_NAME",
      "column_value": "Customer#000030002"
    },
    {
      "ColumnName": "C_ADDRESS",
      "column_value": "UVBoMtILkQu1J3v"
    },
    {
      "ColumnName": "C_NATIONKEY",
      "column_value": 11
    },
    {
      "ColumnName": "C_PHONE",
      "column_value": "21-340-653-9800"
    },
    {
      "ColumnName": "C_ACCTBAL",
      "column_value": 5.221810000000000e+03
    },
    {
      "ColumnName": "C_MKTSEGMENT",
      "column_value": "MACHINERY"
    },
    {
      "ColumnName": "C_COMMENT",
      "column_value": "he slyly ironic pinto beans wake slyly above the fluffily careful warthogs. even dependenci"
    },
    {
      "ColumnName": "C_CUSTKEY",
      "column_value": 30003
    },
    {
      "ColumnName": "C_NAME",
      "column_value": "Customer#000030003"
    },
    {
      "ColumnName": "C_ADDRESS",
      "column_value": "CuGi9fwKn8JdR"
    },
    {
      "ColumnName": "C_NATIONKEY",
      "column_value": 21
    },
    {
      "ColumnName": "C_PHONE",
      "column_value": "31-757-493-7525"
    },
    {
      "ColumnName": "C_ACCTBAL",
      "column_value": 3.014890000000000e+03
    },
    {
      "ColumnName": "C_MKTSEGMENT",
      "column_value": "BUILDING"
    },
    {
      "ColumnName": "C_COMMENT",
      "column_value": "e furiously alongside of the requests. evenly even theodolites are quickly blithely i"
    },
    {
      "ColumnName": "C_CUSTKEY",
      "column_value": 30004
    },
    {
      "ColumnName": "C_NAME",
      "column_value": "Customer#000030004"
    },
    {
      "ColumnName": "C_ADDRESS",
      "column_value": "tkR93ReOnf9zYeO"
    },
    {
      "ColumnName": "C_NATIONKEY",
      "column_value": 23
    },
    {
      "ColumnName": "C_PHONE",
      "column_value": "33-870-136-4375"
    },
    {
      "ColumnName": "C_ACCTBAL",
      "column_value": 3.308550000000000e+03
    },
    {
      "ColumnName": "C_MKTSEGMENT",
      "column_value": "AUTOMOBILE"
    },
    {
      "ColumnName": "C_COMMENT",
      "column_value": "ssly bold deposits. final req"
    },
    {
      "ColumnName": "C_CUSTKEY",
      "column_value": 30005
    },
    {
      "ColumnName": "C_NAME",
      "column_value": "Customer#000030005"
    },
    {
      "ColumnName": "C_ADDRESS",
      "column_value": "pvq4uDoD8pEwpAE01aesCtbD9WU8qmlsvoFav5"
    },
    {
      "ColumnName": "C_NATIONKEY",
      "column_value": 9
    },
    {
      "ColumnName": "C_PHONE",
      "column_value": "19-144-468-5416"
    },
    {
      "ColumnName": "C_ACCTBAL",
      "column_value": -2.785400000000000e+02
    },
    {
      "ColumnName": "C_MKTSEGMENT",
      "column_value": "MACHINERY"
    },
    {
      "ColumnName": "C_COMMENT",
      "column_value": "ructions behind the pinto beans x-ra"
    },
    {
      "ColumnName": "C_CUSTKEY",
      "column_value": 30006
    },
    {
      "ColumnName": "C_NAME",
      "column_value": "Customer#000030006"
    },
    {
      "ColumnName": "C_ADDRESS",
      "column_value": "eFynZc,XeoKmPMZ"
    },
    {
      "ColumnName": "C_NATIONKEY",
      "column_value": 18
    },
    {
      "ColumnName": "C_PHONE",
      "column_value": "28-754-658-5648"
    },
    {
      "ColumnName": "C_ACCTBAL",
      "column_value": 2.427850000000000e+03
    },
    {
      "ColumnName": "C_MKTSEGMENT",
      "column_value": "HOUSEHOLD"
    },
    {
      "ColumnName": "C_COMMENT",
      "column_value": " haggle after the furiously regular dependencies. blithely final requests haggle fin"
    },
    {
      "ColumnName": "C_CUSTKEY",
      "column_value": 30007
    },
    {
      "ColumnName": "C_NAME",
      "column_value": "Customer#000030007"
    },
    {
      "ColumnName": "C_ADDRESS",
      "column_value": "H,Q8PvzCrZor"
    },
    {
      "ColumnName": "C_NATIONKEY",
      "column_value": 5
    },
    {
      "ColumnName": "C_PHONE",
      "column_value": "15-383-236-6110"
    },
    {
      "ColumnName": "C_ACCTBAL",
      "column_value": 3.912670000000000e+03
    },
    {
      "ColumnName": "C_MKTSEGMENT",
      "column_value": "FURNITURE"
    },
    {
      "ColumnName": "C_COMMENT",
      "column_value": " nod fluffily final requests. regular, unusual acc"
    },
    {
      "ColumnName": "C_CUSTKEY",
      "column_value": 30008
    },
    {
      "ColumnName": "C_NAME",
      "column_value": "Customer#000030008"
    },
    {
      "ColumnName": "C_ADDRESS",
      "column_value": "ZCVPLnDjfo9r8Hr0eeoyXxWY6gr9sMUDiKmNTH7"
    },
    {
      "ColumnName": "C_NATIONKEY",
      "column_value": 5
    },
    {
      "ColumnName": "C_PHONE",
      "column_value": "15-325-560-7160"
    },
    {
      "ColumnName": "C_ACCTBAL",
      "column_value": 2.482600000000000e+02
    },
    {
      "ColumnName": "C_MKTSEGMENT",
      "column_value": "MACHINERY"
    },
    {
      "ColumnName": "C_COMMENT",
      "column_value": "carefully final requests detect carefully. quickly silent theodolites inside the special accounts kindle c"
    },
    {
      "ColumnName": "C_CUSTKEY",
      "column_value": 30009
    },
    {
      "ColumnName": "C_NAME",
      "column_value": "Customer#000030009"
    },
    {
      "ColumnName": "C_ADDRESS",
      "column_value": "aEeWtUSm2IyKH46TiP1X,C8c1ygVHpa2aSwV"
    },
    {
      "ColumnName": "C_NATIONKEY",
      "column_value": 12
    },
    {
      "ColumnName": "C_PHONE",
      "column_value": "22-682-831-9594"
    },
    {
      "ColumnName": "C_ACCTBAL",
      "column_value": 1.471930000000000e+03
    },
    {
      "ColumnName": "C_MKTSEGMENT",
      "column_value": "FURNITURE"
    },
    {
      "ColumnName": "C_COMMENT",
      "column_value": "ly bold packages about the slyly even pinto beans are fluffily theodolites. carefully bold foxes sol"
    },
    {
      "ColumnName": "C_CUSTKEY",
      "column_value": 30010
    },
    {
      "ColumnName": "C_NAME",
      "column_value": "Customer#000030010"
    },
    {
      "ColumnName": "C_ADDRESS",
      "column_value": "m1XDhjp3FlJQBxmEFxujEp3rQj82"
    },
    {
      "ColumnName": "C_NATIONKEY",
      "column_value": 21
    },
    {
      "ColumnName": "C_PHONE",
      "column_value": "31-529-816-9872"
    },
    {
      "ColumnName": "C_ACCTBAL",
      "column_value": 8.599709999999999e+03
    },
    {
      "ColumnName": "C_MKTSEGMENT",
      "column_value": "BUILDING"
    },
    {
      "ColumnName": "C_COMMENT",
      "column_value": ". accounts cajole after the slyly ironic foxes. fluffy instructions kindle about the asymptotes."
    }
  ]
}













CONSEGUIMOS FAZER ISSO POR MEIO 


DO USO DO WHILE LOOP E FOR LOOP...

















--> AGORA O PROFESSOR DEMONSTRA O USO 


DO IF-ELSE:










if (col_name === 'C_NAME') {
  col_value='JOHN'
} else {
  col_value
};
















OU SEJA,



SE A COLUMN FOR "C_NAME", queremos que o value dessa col 


fique como "JOHN" (

  com isso, vamos fazer com que TODOS OS VALUES DE "C_NAME"

  fiquem como "JOHN", no result set retornado pela 

  stored procedure
)






EX:



















create or replace procedure column_fill_rate_loops_if_else(TABLE_NAME varchar)
  returns VARIANT NOT NULL
  language javascript
  as     
  $$  
  
    var array_of_rows = [];
    row_as_json = {};
    


    //// 1) SQL STATEMENT IN JAVASCRIPT VARIABLE
    var my_sql_command = "select * from "+ TABLE_NAME +" LIMIT 10;"

    //// 2) CREATION OF STATEMENT OBJECT, USING SQL COMMAND.
    var statement1 = snowflake.createStatement( {sqlText: my_sql_command} );

    //// 3) EXECUTION OF STATEMENT OBJECT
    var result_set1 = statement1.execute();
    

    //// 3.5) EXECUTION OF ".next()" on result_set OBJECT (MUST ALWAYS BE DONE, EVEN WITHOUT WHILE AND FOR LOOPS)
      while (result_set1.next())  {
        // Put each row in a variable of type JSON.
 
        // For each column in the row...
        for (var col_num = 0; col_num < result_set1.getColumnCount(); col_num = col_num + 1) {
          var col_name =result_set1.getColumnName(col_num+1);
          var col_value = result_set1.getColumnValue(col_num+1);
          

          if (col_name==='C_NAME') {
            col_value='JOHN';
          } else {
            col_value
          }


          row_as_json = { ColumnName : col_name ,column_value : col_value}
          
          array_of_rows.push(row_as_json)
          }
          
        }   
        
  table_as_json = { "key1" : array_of_rows };
   
   //// 4) RETURN OF RESULT SET/OTHER OBJECT, CONSTRUCTED USING THE RESULT SET (transformations)
   return table_as_json; 
  $$
  ;

















QUER DIZER QUE 








LOOPS E CONTROL STATEMENTS FUNCIONAM PERFEITAMENTE...


















IMPORTANTE!!!! --> SE VC REALMENTE QUER 


LOOPAR POR DENTRO DE TODOS OS RECORDS,

VC 

PRECISA CHAMAR "result_set1.next()",




VOCE PRECISA FAZER ISSO (principalmente 
se vc deseja usar 1 WHILE LOOP... o que é algo 

que vc geralmente gostará de fazer),













VC TIPICAMENTE USARÁ 


ESSE "result_set1.next()" 

PARA 



REALIZAR OPERATIONS NOS SEUS RECORDS...










--> E "result_set1.next()"


SEMPRE VAI TE RETORNAR OU TRUE OU FALSE...







--> SE O PRÓXIMO ROW EXISTE,

ELE RETORNA TRUE, CASO CONTRÁRIO, FALSE...













--> MESMO QUE VOCE NAO USE "while loops"



ou "for loops",


vc DEVE USAR 




esse "result_set1.next()"


PARA PELO MENOS __ INICIALIZAR O CURSOR...

















COMO EXEMPLO DE COMO FICAREMOS COM ___ERRORS__ 


SE NAO RODARMOS "result_set1.next()" dentro 

de 

1 

procedure,

O PROFESSOR ESCREVE ASSIM:









---- ISTO NAO FUNCIONARÁ...
create or replace procedure column_fill_rate_loops_if_else(TABLE_NAME varchar)
  returns VARIANT NOT NULL
  language javascript
  as     
  $$  
  
    var array_of_rows = [];
    row_as_json = {};
    


    //// 1) SQL STATEMENT IN JAVASCRIPT VARIABLE
    var my_sql_command = "select * from "+ TABLE_NAME +" LIMIT 10;"

    //// 2) CREATION OF STATEMENT OBJECT, USING SQL COMMAND.
    var statement1 = snowflake.createStatement( {sqlText: my_sql_command} );

    //// 3) EXECUTION OF STATEMENT OBJECT
    var result_set1 = statement1.execute();
    
     ---- result_set1.next()  /// COMENTADO PARA FORA. -- SUA AUSENCIA CAUSARÁ UM __ERROR__..


              columnName = result_set1.getColumnName(1);
              column_value = result_set1.getColumnValue(1);

              row_as_json = {
                ColumnName: ColumnName,
                column_value: column_value
              }
        
  table_as_json = { "key1" : array_of_rows };
   
   //// 4) RETURN OF RESULT SET/OTHER OBJECT, CONSTRUCTED USING THE RESULT SET (transformations)
   return table_as_json; 
  $$
  ;





























O ERRO FOI:



"ResultSet is empty or not prepared. call next() first."
















-> ESSE ERRO APARECEU 


PQ O CURSOR NAO FOI INICIALIZADO,


TUDO PQ NAO CHAMAMOS "result_set.next()"...








--> ISSO ACONTECE PQ O SNOWFLAKE VAI SEMPRE ARMAZENAR 

O RESULT SET EM 1 OBJECT... MAS ESSE OBJECT, NESSE CASO,

NAO TERÁ SIDO INICIALIZADO...










--> É POR ISSO QUE SEMPRE DEVEMOS RODAR "result_set.next()"...








--> depois de "statement.execute()",



sempre rode 

"result_set.next()",


PQ CASO CONTRÁRIO,

VC NAO SERÁ CAPAZ DE USAR 



METHODS COMO 


"result_set1.getColumnName"


e 


"result_set1.getColumnValue"...





(methods próprios do result set object)...




