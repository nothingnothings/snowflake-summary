




NESSA AULA, VEREMOS COMO 


ADICIONAR DYNAMIC FILTER E 

COMO CRIAR CUSTOM FILTER NO SNOWSIGHT...















--------> TEMOS A QUERY DE CÁLCULO DE CUSTOS,
TIPO ASSIM:














-- Warehouse will give information about credit information.
-- WAREHOUSE_HISTORY view will calculate credit and cost grouped by warehouse name.


WITH 
WAREHOUSE_HISTORY AS

 (SELECT TO_DATE(START_TIME) START_TIME,
          WAREHOUSE_NAME,
          'SNOWFLAKE_WAREHOUSE_COST' CRITERIA,
                                     sum(credits_used) AS CREDITS,
                                     ROUND(sum(credits_used)*4, 2) COST  -- according to edition (standard, enterprise, business critical)
   FROM snowflake.account_usage.warehouse_metering_history
   WHERE to_date(start_time) >=date_trunc(MONTH, CURRENT_DATE)
     AND WAREHOUSE_NAME IS NOT NULL
     AND WAREHOUSE_NAME NOT IN (' ',
                                'CLOUD_SERVICES_ONLY')
   GROUP BY TO_DATE(START_TIME), WAREHOUSE_NAME),
			
	
-- Using the query execution time we will calculate the approx credits for the queries executed on warehouse.
-- We will compare the credits calculated from query execution with total credits from WAREHOUSE_HISTORY to calculate Idle cost.

  QUERY_HISTORY AS
  
  (SELECT TO_DATE(START_TIME) START_TIME,
          WAREHOUSE_NAME,
          'QUERY_EXECUTION_COST' CRITERIA,
                                 sum(WAREHOUSE_COST) CREDITS,
                                 ROUND(sum(WAREHOUSE_COST) *4, 2) COST
   FROM
     (SELECT TO_DATE(START_TIME) START_TIME,
             WAREHOUSE_NAME,
             CASE
                 WHEN WAREHOUSE_SIZE='X-Small' THEN ((((EXECUTION_TIME/1000)/60))*(CLUSTER_NUMBER*1))/60
                 WHEN WAREHOUSE_SIZE='Small' THEN ((((EXECUTION_TIME/1000)/60))*(CLUSTER_NUMBER*2))/60
                 WHEN WAREHOUSE_SIZE='Medium' THEN ((((EXECUTION_TIME/1000)/60))*(CLUSTER_NUMBER*4))/60
                 WHEN WAREHOUSE_SIZE='Large' THEN ((((EXECUTION_TIME/1000)/60))*(CLUSTER_NUMBER*8))/60
                 WHEN WAREHOUSE_SIZE='X-Large' THEN ((((EXECUTION_TIME/1000)/60))*(CLUSTER_NUMBER*16))/60
                 WHEN WAREHOUSE_SIZE='2X-Large' THEN ((((EXECUTION_TIME/1000)/60))*(CLUSTER_NUMBER*32))/60
                 WHEN WAREHOUSE_SIZE='3X-Large' THEN ((((EXECUTION_TIME/1000)/60))*(CLUSTER_NUMBER*64))/60
                 WHEN WAREHOUSE_SIZE='4X-Large' THEN ((((EXECUTION_TIME/1000)/60))*(CLUSTER_NUMBER*128))/60
             END WAREHOUSE_COST
      FROM snowflake.account_usage.query_history
      WHERE to_date(start_time) >=date_trunc(MONTH, CURRENT_DATE) )
   GROUP BY TO_DATE(START_TIME),
            WAREHOUSE_NAME),
			

  -- 1 credit -- 60 minutes

-- Calculate approx Idle credits and cost. This will use the calculation done from above steps.
			
   IDLE_COST AS
   
  (SELECT A.START_TIME,
          A.WAREHOUSE_NAME,
          'IDLE_COST' CRITERIA,
                      (A.CREDITS-B.CREDITS) CREDITS,
                      (A.CREDITS-B.CREDITS)*4 COST
   FROM WAREHOUSE_HISTORY A
   INNER JOIN QUERY_HISTORY B ON A.WAREHOUSE_NAME=B.WAREHOUSE_NAME
   AND A.START_TIME=B.START_TIME),
   
  -- Categorise and union actual snowflake warehouse cost, snowflake query execution cost and Idle cost.
  
  OVERVIEW AS
  
  (SELECT START_TIME,
          WAREHOUSE_NAME,
          CRITERIA,
          ROUND(CREDITS, 2)CREDITS,
          ROUND(COST, 2) COST
   FROM WAREHOUSE_HISTORY
   
   UNION 
   
   SELECT START_TIME,
                WAREHOUSE_NAME,
                CRITERIA,
                ROUND(CREDITS, 2)CREDITS,
                ROUND(COST, 2) COST
   FROM QUERY_HISTORY
   
   UNION 
   
   SELECT START_TIME,
                WAREHOUSE_NAME,
                CRITERIA,
                ROUND(CREDITS, 2)CREDITS,
                ROUND(COST, 2) COST
   FROM IDLE_COST)
   
   
SELECT SUM(COST) COST
FROM OVERVIEW
WHERE CRITERIA='SNOWFLAKE_WAREHOUSE_COST'
-- WHERE CRITERIA='QUERY_EXECUTION_COST'
-- WHERE CRITERIA='IDLE_COST' -- o idle cost de suas maquinas (é um value dentro do snowflake_warehouse_cost)
  AND WAREHOUSE_NAME='COMPUTE_WH'; -- insert value in here
-- AND  START_TIME= daterange;  -- insert value in here
















--> podemos colocar a parte de "AND START_TIME"


PARA DENTRO DA QUERY, TIPO ASSIM:






-- Warehouse will give information about credit information.
-- WAREHOUSE_HISTORY view will calculate credit and cost grouped by warehouse name.


WITH 
WAREHOUSE_HISTORY AS

 (SELECT TO_DATE(START_TIME) START_TIME,
          WAREHOUSE_NAME,
          'SNOWFLAKE_WAREHOUSE_COST' CRITERIA,
                                     sum(credits_used) AS CREDITS,
                                     ROUND(sum(credits_used)*4, 2) COST  -- according to edition (standard, enterprise, business critical)
   FROM snowflake.account_usage.warehouse_metering_history
   WHERE to_date(start_time) >=date_trunc(MONTH, CURRENT_DATE)
     AND WAREHOUSE_NAME IS NOT NULL
     AND WAREHOUSE_NAME NOT IN (' ',
                                'CLOUD_SERVICES_ONLY')
   GROUP BY TO_DATE(START_TIME), WAREHOUSE_NAME),
			
	
-- Using the query execution time we will calculate the approx credits for the queries executed on warehouse.
-- We will compare the credits calculated from query execution with total credits from WAREHOUSE_HISTORY to calculate Idle cost.

  QUERY_HISTORY AS
  
  (SELECT TO_DATE(START_TIME) START_TIME,
          WAREHOUSE_NAME,
          'QUERY_EXECUTION_COST' CRITERIA,
                                 sum(WAREHOUSE_COST) CREDITS,
                                 ROUND(sum(WAREHOUSE_COST) *4, 2) COST
   FROM
     (SELECT TO_DATE(START_TIME) START_TIME,
             WAREHOUSE_NAME,
             CASE
                 WHEN WAREHOUSE_SIZE='X-Small' THEN ((((EXECUTION_TIME/1000)/60))*(CLUSTER_NUMBER*1))/60
                 WHEN WAREHOUSE_SIZE='Small' THEN ((((EXECUTION_TIME/1000)/60))*(CLUSTER_NUMBER*2))/60
                 WHEN WAREHOUSE_SIZE='Medium' THEN ((((EXECUTION_TIME/1000)/60))*(CLUSTER_NUMBER*4))/60
                 WHEN WAREHOUSE_SIZE='Large' THEN ((((EXECUTION_TIME/1000)/60))*(CLUSTER_NUMBER*8))/60
                 WHEN WAREHOUSE_SIZE='X-Large' THEN ((((EXECUTION_TIME/1000)/60))*(CLUSTER_NUMBER*16))/60
                 WHEN WAREHOUSE_SIZE='2X-Large' THEN ((((EXECUTION_TIME/1000)/60))*(CLUSTER_NUMBER*32))/60
                 WHEN WAREHOUSE_SIZE='3X-Large' THEN ((((EXECUTION_TIME/1000)/60))*(CLUSTER_NUMBER*64))/60
                 WHEN WAREHOUSE_SIZE='4X-Large' THEN ((((EXECUTION_TIME/1000)/60))*(CLUSTER_NUMBER*128))/60
             END WAREHOUSE_COST
      FROM snowflake.account_usage.query_history
      WHERE to_date(start_time) >=date_trunc(MONTH, CURRENT_DATE) )
   GROUP BY TO_DATE(START_TIME),
            WAREHOUSE_NAME),
			

  -- 1 credit -- 60 minutes

-- Calculate approx Idle credits and cost. This will use the calculation done from above steps.
			
   IDLE_COST AS
   
  (SELECT A.START_TIME,
          A.WAREHOUSE_NAME,
          'IDLE_COST' CRITERIA,
                      (A.CREDITS-B.CREDITS) CREDITS,
                      (A.CREDITS-B.CREDITS)*4 COST
   FROM WAREHOUSE_HISTORY A
   INNER JOIN QUERY_HISTORY B ON A.WAREHOUSE_NAME=B.WAREHOUSE_NAME
   AND A.START_TIME=B.START_TIME),
   
  -- Categorise and union actual snowflake warehouse cost, snowflake query execution cost and Idle cost.
  
  OVERVIEW AS
  
  (SELECT START_TIME,
          WAREHOUSE_NAME,
          CRITERIA,
          ROUND(CREDITS, 2)CREDITS,
          ROUND(COST, 2) COST
   FROM WAREHOUSE_HISTORY
   
   UNION 
   
   SELECT START_TIME,
                WAREHOUSE_NAME,
                CRITERIA,
                ROUND(CREDITS, 2)CREDITS,
                ROUND(COST, 2) COST
   FROM QUERY_HISTORY
   
   UNION 
   
   SELECT START_TIME,
                WAREHOUSE_NAME,
                CRITERIA,
                ROUND(CREDITS, 2)CREDITS,
                ROUND(COST, 2) COST
   FROM IDLE_COST)
   
   
SELECT SUM(COST) COST
FROM OVERVIEW
WHERE CRITERIA='SNOWFLAKE_WAREHOUSE_COST'
-- WHERE CRITERIA='QUERY_EXECUTION_COST'
-- WHERE CRITERIA='IDLE_COST' -- o idle cost de suas maquinas (é um value dentro do snowflake_warehouse_cost)
  AND WAREHOUSE_NAME='COMPUTE_WH'; -- insert value in here
-- AND  START_TIME= :daterange;  -- insert value in here















SE FAZEMOS ISSO,


na UI do snowsight 


encontramos 


1 pequeno botao de "last day",


que pode SER CLICADO...










--> QUER DIZER QUE ESSA PARTE DE ":daterange" É DINAMICA,

pode ser manipulada pelo SNOWSIGHT...












meu deus, isso funciona.... 



e é super estranho...











QUER DIZER QUE ESSES SAO OS DYNAMIC FILTERS,


PODEMOS OS UTILIZAR PARA 


INSERIR 






VALORES A PARTIR DA INTERFACE DO SNOWSIGHT...










OS VALORES INSERT CUSTOMIZADOS SAO:





:daterange 



:datebucket 


:Warehouse 




















TIPO ASSIM:




















-- Warehouse will give information about credit information.
-- WAREHOUSE_HISTORY view will calculate credit and cost grouped by warehouse name.


WITH 
WAREHOUSE_HISTORY AS

 (SELECT TO_DATE(START_TIME) START_TIME,
          WAREHOUSE_NAME,
          'SNOWFLAKE_WAREHOUSE_COST' CRITERIA,
                                     sum(credits_used) AS CREDITS,
                                     ROUND(sum(credits_used)*4, 2) COST  -- according to edition (standard, enterprise, business critical)
   FROM snowflake.account_usage.warehouse_metering_history
   WHERE to_date(start_time) >=date_trunc(MONTH, CURRENT_DATE)
     AND WAREHOUSE_NAME IS NOT NULL
     AND WAREHOUSE_NAME NOT IN (' ',
                                'CLOUD_SERVICES_ONLY')
   GROUP BY TO_DATE(START_TIME), WAREHOUSE_NAME),
			
	
-- Using the query execution time we will calculate the approx credits for the queries executed on warehouse.
-- We will compare the credits calculated from query execution with total credits from WAREHOUSE_HISTORY to calculate Idle cost.

  QUERY_HISTORY AS
  
  (SELECT TO_DATE(START_TIME) START_TIME,
          WAREHOUSE_NAME,
          'QUERY_EXECUTION_COST' CRITERIA,
                                 sum(WAREHOUSE_COST) CREDITS,
                                 ROUND(sum(WAREHOUSE_COST) *4, 2) COST
   FROM
     (SELECT TO_DATE(START_TIME) START_TIME,
             WAREHOUSE_NAME,
             CASE
                 WHEN WAREHOUSE_SIZE='X-Small' THEN ((((EXECUTION_TIME/1000)/60))*(CLUSTER_NUMBER*1))/60
                 WHEN WAREHOUSE_SIZE='Small' THEN ((((EXECUTION_TIME/1000)/60))*(CLUSTER_NUMBER*2))/60
                 WHEN WAREHOUSE_SIZE='Medium' THEN ((((EXECUTION_TIME/1000)/60))*(CLUSTER_NUMBER*4))/60
                 WHEN WAREHOUSE_SIZE='Large' THEN ((((EXECUTION_TIME/1000)/60))*(CLUSTER_NUMBER*8))/60
                 WHEN WAREHOUSE_SIZE='X-Large' THEN ((((EXECUTION_TIME/1000)/60))*(CLUSTER_NUMBER*16))/60
                 WHEN WAREHOUSE_SIZE='2X-Large' THEN ((((EXECUTION_TIME/1000)/60))*(CLUSTER_NUMBER*32))/60
                 WHEN WAREHOUSE_SIZE='3X-Large' THEN ((((EXECUTION_TIME/1000)/60))*(CLUSTER_NUMBER*64))/60
                 WHEN WAREHOUSE_SIZE='4X-Large' THEN ((((EXECUTION_TIME/1000)/60))*(CLUSTER_NUMBER*128))/60
             END WAREHOUSE_COST
      FROM snowflake.account_usage.query_history
      WHERE to_date(start_time) >=date_trunc(MONTH, CURRENT_DATE) )
   GROUP BY TO_DATE(START_TIME),
            WAREHOUSE_NAME),
			

  -- 1 credit -- 60 minutes

-- Calculate approx Idle credits and cost. This will use the calculation done from above steps.
			
   IDLE_COST AS
   
  (SELECT A.START_TIME,
          A.WAREHOUSE_NAME,
          'IDLE_COST' CRITERIA,
                      (A.CREDITS-B.CREDITS) CREDITS,
                      (A.CREDITS-B.CREDITS)*4 COST
   FROM WAREHOUSE_HISTORY A
   INNER JOIN QUERY_HISTORY B ON A.WAREHOUSE_NAME=B.WAREHOUSE_NAME
   AND A.START_TIME=B.START_TIME),
   
  -- Categorise and union actual snowflake warehouse cost, snowflake query execution cost and Idle cost.
  
  OVERVIEW AS
  
  (SELECT START_TIME,
          WAREHOUSE_NAME,
          CRITERIA,
          ROUND(CREDITS, 2)CREDITS,
          ROUND(COST, 2) COST
   FROM WAREHOUSE_HISTORY
   
   UNION 
   
   SELECT START_TIME,
                WAREHOUSE_NAME,
                CRITERIA,
                ROUND(CREDITS, 2)CREDITS,
                ROUND(COST, 2) COST
   FROM QUERY_HISTORY
   
   UNION 
   
   SELECT START_TIME,
                WAREHOUSE_NAME,
                CRITERIA,
                ROUND(CREDITS, 2)CREDITS,
                ROUND(COST, 2) COST
   FROM IDLE_COST)
   
   
SELECT SUM(COST) COST
FROM OVERVIEW
WHERE CRITERIA='SNOWFLAKE_WAREHOUSE_COST'
-- WHERE CRITERIA='QUERY_EXECUTION_COST'
-- WHERE CRITERIA='IDLE_COST' -- o idle cost de suas maquinas (é um value dentro do snowflake_warehouse_cost)
  AND WAREHOUSE_NAME='COMPUTE_WH'; -- insert value in here
-- AND  WAREHOUSE_NAME=:Warehouse;  -- insert value in here (dynamic, use SNOWSIGHT to insert value) -- and ':Warehouse' is a custom filter, created by us
-- AND  START_TIME=:daterange;  -- insert value in here (dynamic, use SNOWSIGHT to insert value)





















--> OK....













--> mas esse ":Warehouse" aí é um __CUSTOM_ FILTER_...










MAIS TARDE O PROFESSOR NOS MOSTRARÁ COMO PODEMOS

CRIAR CUSTOM FILTERS, no snowflake...
















COLOCAMOS ESSE ":daterange",



que nos 

deixa 





mexer naquele button de date...










--> podemos escolher entre last 7 days, month,



range customizada, etc....













--> ESSA É UMA DAS MANEIRAS DE USAR O FILTER,
INSERIR VALUES CUSTOMIZADOS...







OK.... MAS DIGAMOS QUE QUEREMOS 


ADICIONAR TAMBÉM O "WAREHOUSE_NAME"...

















--> para isso, precisamos criar o CUSTOM DYNAMIC FILTER 


de 

':Warehouse'....









--> PARA CRIARMOS 1 CUSTOM FILTER,

DEVEMOS CLICAR NO BUTTONZINHO em cima, na esquerda,



tipo assim:

    ---o 
    -O 
    -



--> clicamos esse button, que nos deixa MANAGEAR OS FILTERS...






--> E PODEMOS ADICIONAR 1 NOVO FILTER, CUSTOMIZADO...








--> Colocamos "my_warehouse"


no Display name,


":my_warehouse" como identifier...








--> COLOCAMOS QUE, PARA EXECUTAR ESSE FILTER,


QUEREMOS USAR 


A WAREHOUSE DE "COMPUTE_WH"..







--> AÍ COLOCAMOS "WRITE QUERY",

para ESCREVERMOS A NOSSA QUERY, EM QUE 
TEREMOS 1 LISTA 

DAS WAREHOUSES...

(esses serao os values selecionáveis)...








TIPO ASSIM:










SELECT DISTINCT warehouse_name FROM snowflake.account_usage.warehouse_metering_history;







OK... ISSO NOS DÁ A LISTA DE VALUES SELECIONÁVEIS.












--> PODEMOS COLOCAR "MULTIPLE VALUES CAN BE SELECTED"....





"include all options"...







certo, isso é bem customizável, bem flexível....










FICA TIPO ASSIM:















-- Warehouse will give information about credit information.
-- WAREHOUSE_HISTORY view will calculate credit and cost grouped by warehouse name.


WITH 
WAREHOUSE_HISTORY AS

 (SELECT TO_DATE(START_TIME) START_TIME,
          WAREHOUSE_NAME,
          'SNOWFLAKE_WAREHOUSE_COST' CRITERIA,
                                     sum(credits_used) AS CREDITS,
                                     ROUND(sum(credits_used)*4, 2) COST  -- according to edition (standard, enterprise, business critical)
   FROM snowflake.account_usage.warehouse_metering_history
   WHERE to_date(start_time) >=date_trunc(MONTH, CURRENT_DATE)
     AND WAREHOUSE_NAME IS NOT NULL
     AND WAREHOUSE_NAME NOT IN (' ',
                                'CLOUD_SERVICES_ONLY')
   GROUP BY TO_DATE(START_TIME), WAREHOUSE_NAME),
			
	
-- Using the query execution time we will calculate the approx credits for the queries executed on warehouse.
-- We will compare the credits calculated from query execution with total credits from WAREHOUSE_HISTORY to calculate Idle cost.

  QUERY_HISTORY AS
  
  (SELECT TO_DATE(START_TIME) START_TIME,
          WAREHOUSE_NAME,
          'QUERY_EXECUTION_COST' CRITERIA,
                                 sum(WAREHOUSE_COST) CREDITS,
                                 ROUND(sum(WAREHOUSE_COST) *4, 2) COST
   FROM
     (SELECT TO_DATE(START_TIME) START_TIME,
             WAREHOUSE_NAME,
             CASE
                 WHEN WAREHOUSE_SIZE='X-Small' THEN ((((EXECUTION_TIME/1000)/60))*(CLUSTER_NUMBER*1))/60
                 WHEN WAREHOUSE_SIZE='Small' THEN ((((EXECUTION_TIME/1000)/60))*(CLUSTER_NUMBER*2))/60
                 WHEN WAREHOUSE_SIZE='Medium' THEN ((((EXECUTION_TIME/1000)/60))*(CLUSTER_NUMBER*4))/60
                 WHEN WAREHOUSE_SIZE='Large' THEN ((((EXECUTION_TIME/1000)/60))*(CLUSTER_NUMBER*8))/60
                 WHEN WAREHOUSE_SIZE='X-Large' THEN ((((EXECUTION_TIME/1000)/60))*(CLUSTER_NUMBER*16))/60
                 WHEN WAREHOUSE_SIZE='2X-Large' THEN ((((EXECUTION_TIME/1000)/60))*(CLUSTER_NUMBER*32))/60
                 WHEN WAREHOUSE_SIZE='3X-Large' THEN ((((EXECUTION_TIME/1000)/60))*(CLUSTER_NUMBER*64))/60
                 WHEN WAREHOUSE_SIZE='4X-Large' THEN ((((EXECUTION_TIME/1000)/60))*(CLUSTER_NUMBER*128))/60
             END WAREHOUSE_COST
      FROM snowflake.account_usage.query_history
      WHERE to_date(start_time) >=date_trunc(MONTH, CURRENT_DATE) )
   GROUP BY TO_DATE(START_TIME),
            WAREHOUSE_NAME),
			

  -- 1 credit -- 60 minutes

-- Calculate approx Idle credits and cost. This will use the calculation done from above steps.
			
   IDLE_COST AS
   
  (SELECT A.START_TIME,
          A.WAREHOUSE_NAME,
          'IDLE_COST' CRITERIA,
                      (A.CREDITS-B.CREDITS) CREDITS,
                      (A.CREDITS-B.CREDITS)*4 COST
   FROM WAREHOUSE_HISTORY A
   INNER JOIN QUERY_HISTORY B ON A.WAREHOUSE_NAME=B.WAREHOUSE_NAME
   AND A.START_TIME=B.START_TIME),
   
  -- Categorise and union actual snowflake warehouse cost, snowflake query execution cost and Idle cost.
  
  OVERVIEW AS
  
  (SELECT START_TIME,
          WAREHOUSE_NAME,
          CRITERIA,
          ROUND(CREDITS, 2)CREDITS,
          ROUND(COST, 2) COST
   FROM WAREHOUSE_HISTORY
   
   UNION 
   
   SELECT START_TIME,
                WAREHOUSE_NAME,
                CRITERIA,
                ROUND(CREDITS, 2)CREDITS,
                ROUND(COST, 2) COST
   FROM QUERY_HISTORY
   
   UNION 
   
   SELECT START_TIME,
                WAREHOUSE_NAME,
                CRITERIA,
                ROUND(CREDITS, 2)CREDITS,
                ROUND(COST, 2) COST
   FROM IDLE_COST)
   
   
SELECT SUM(COST) COST
FROM OVERVIEW
WHERE CRITERIA='SNOWFLAKE_WAREHOUSE_COST'
-- WHERE CRITERIA='QUERY_EXECUTION_COST'
-- WHERE CRITERIA='IDLE_COST' -- o idle cost de suas maquinas (é um value dentro do snowflake_warehouse_cost)
  AND WAREHOUSE_NAME='COMPUTE_WH'; -- insert value in here
  -- AND WAREHOUSE_NAME=:my_warehouse; -- custom filter (created by us) example.
-- AND  WAREHOUSE_NAME=:Warehouse;  -- insert value in here (dynamic, use SNOWSIGHT to insert value) -- and ':Warehouse' is a custom filter, created by us
-- AND  START_TIME=:daterange;  -- insert value in here (dynamic, use SNOWSIGHT to insert value)


















É ASSIM QUE PODEMOS APLICAR DYNAMIC FILTERS 



A NOSSAS QUERIES..








--> E ISSO PODE SER LEVERAGED QUANDO CRIAMOS O DASHBOARD,


PQ PODEMOS FILTRAR ISSO AO LONGO DO DASHBOARD,


E VER OS RESULTS....



















--> PROFESSOR VE 89 DOLARES DE IDLE COST...







agora VEREMOS COMO CRIAR O DASHBOARD...